
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d40  08003d40  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d40  08003d40  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d40  08003d40  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000ac  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a830  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a8a  00000000  00000000  0002a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a5  00000000  00000000  0002cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f080  00000000  00000000  0002d055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a66e  00000000  00000000  0004c0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc5b8  00000000  00000000  00056743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001cac  00000000  00000000  00112cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001149a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003cf0 	.word	0x08003cf0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003cf0 	.word	0x08003cf0

080001d4 <HAL_UART_RxCpltCallback>:
uint8_t rxCounter = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if (rxByte[0] != '\n') {
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b0a      	cmp	r3, #10
 80001e2:	d00d      	beq.n	8000200 <HAL_UART_RxCpltCallback+0x2c>
		buffer_uart[rxCounter] = rxByte[0];
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <HAL_UART_RxCpltCallback+0x48>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001ec:	7819      	ldrb	r1, [r3, #0]
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <HAL_UART_RxCpltCallback+0x4c>)
 80001f0:	5499      	strb	r1, [r3, r2]
		rxCounter++;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <HAL_UART_RxCpltCallback+0x48>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <HAL_UART_RxCpltCallback+0x48>)
 80001fc:	701a      	strb	r2, [r3, #0]
 80001fe:	e002      	b.n	8000206 <HAL_UART_RxCpltCallback+0x32>
	} else {
		//Reset pointer in rx buffer
		rxCounter = 0;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_UART_RxCpltCallback+0x48>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, rxByte, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	4903      	ldr	r1, [pc, #12]	; (8000218 <HAL_UART_RxCpltCallback+0x44>)
 800020a:	4806      	ldr	r0, [pc, #24]	; (8000224 <HAL_UART_RxCpltCallback+0x50>)
 800020c:	f002 fb58 	bl	80028c0 <HAL_UART_Receive_IT>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	200000c1 	.word	0x200000c1
 8000220:	20000000 	.word	0x20000000
 8000224:	20000038 	.word	0x20000038

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 f9fa 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f820 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8ac 	bl	8000390 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f87a 	bl	8000330 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rxByte, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	490a      	ldr	r1, [pc, #40]	; (8000268 <main+0x40>)
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0x44>)
 8000242:	f002 fb3d 	bl	80028c0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024a:	f000 fa51 	bl	80006f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800024e:	2120      	movs	r1, #32
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fd9a 	bl	8000d8c <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, buffer_uart, sizeof(buffer_uart), 100);
 8000258:	2364      	movs	r3, #100	; 0x64
 800025a:	220d      	movs	r2, #13
 800025c:	4904      	ldr	r1, [pc, #16]	; (8000270 <main+0x48>)
 800025e:	4803      	ldr	r0, [pc, #12]	; (800026c <main+0x44>)
 8000260:	f002 faa4 	bl	80027ac <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000264:	e7ef      	b.n	8000246 <main+0x1e>
 8000266:	bf00      	nop
 8000268:	200000c0 	.word	0x200000c0
 800026c:	20000038 	.word	0x20000038
 8000270:	20000000 	.word	0x20000000

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b0a6      	sub	sp, #152	; 0x98
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fd08 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2258      	movs	r2, #88	; 0x58
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fcfa 	bl	8003c98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2310      	movs	r3, #16
 80002ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fd74 	bl	8000dc0 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002de:	f000 f8bd 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fdb2 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030a:	f000 f8a7 	bl	800045c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030e:	2302      	movs	r3, #2
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ffdb 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000324:	f000 f89a 	bl	800045c <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3798      	adds	r7, #152	; 0x98
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000336:	4a15      	ldr	r2, [pc, #84]	; (800038c <MX_USART2_UART_Init+0x5c>)
 8000338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_USART2_UART_Init+0x58>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART2_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART2_UART_Init+0x58>)
 8000374:	f002 f9cc 	bl	8002710 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037e:	f000 f86d 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000038 	.word	0x20000038
 800038c:	40004400 	.word	0x40004400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a2a      	ldr	r2, [pc, #168]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ba:	613b      	str	r3, [r7, #16]
 80003bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a24      	ldr	r2, [pc, #144]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2120      	movs	r1, #32
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fca5 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000418:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <MX_GPIO_Init+0xc8>)
 800042a:	f000 fb0d 	bl	8000a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800042e:	2320      	movs	r3, #32
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000448:	f000 fafe 	bl	8000a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044c:	bf00      	nop
 800044e:	3728      	adds	r7, #40	; 0x28
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	48000800 	.word	0x48000800

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800049e:	2007      	movs	r0, #7
 80004a0:	f000 fa1a 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <HAL_UART_MspInit+0x8c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d130      	bne.n	8000534 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000502:	230c      	movs	r3, #12
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000512:	2307      	movs	r3, #7
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fa92 	bl	8000a48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2026      	movs	r0, #38	; 0x26
 800052a:	f000 f9e0 	bl	80008ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800052e:	2026      	movs	r0, #38	; 0x26
 8000530:	f000 f9f9 	bl	8000926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	; 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40004400 	.word	0x40004400
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <MemManage_Handler+0x4>

08000556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler+0x4>

08000562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f88e 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <USART2_IRQHandler+0x10>)
 800059e:	f002 f9d3 	bl	8002948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000038 	.word	0x20000038

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000608 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff ffea 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f003 fb53 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fe11 	bl	8000228 <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000608:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000614:	08003d48 	.word	0x08003d48
  ldr r2, =_sbss
 8000618:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800061c:	200000c8 	.word	0x200000c8

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f94f 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff ff12 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f967 	bl	8000942 <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800068c:	f000 f92f 	bl	80008ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000010 	.word	0x20000010
 80006a8:	20000018 	.word	0x20000018
 80006ac:	20000014 	.word	0x20000014

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x20>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_IncTick+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000018 	.word	0x20000018
 80006d4:	200000c4 	.word	0x200000c4

080006d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;  
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200000c4 	.word	0x200000c4

080006f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff ffee 	bl	80006d8 <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000708:	d005      	beq.n	8000716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_Delay+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000716:	bf00      	nop
 8000718:	f7ff ffde 	bl	80006d8 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8f7      	bhi.n	8000718 <HAL_Delay+0x28>
  {
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000018 	.word	0x20000018

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <__NVIC_EnableIRQ+0x38>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b8:	f7ff ff8e 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff29 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff3e 	bl	8000780 <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff8e 	bl	800082c <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff31 	bl	800079c <__NVIC_EnableIRQ>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa2 	bl	8000894 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000968:	2b02      	cmp	r3, #2
 800096a:	d008      	beq.n	800097e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2204      	movs	r2, #4
 8000970:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e020      	b.n	80009c0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 020e 	bic.w	r2, r2, #14
 800098c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 0201 	bic.w	r2, r2, #1
 800099c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d005      	beq.n	80009ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2204      	movs	r2, #4
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e027      	b.n	8000a3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 020e 	bic.w	r2, r2, #14
 80009fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 0201 	bic.w	r2, r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a16:	2101      	movs	r1, #1
 8000a18:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	4798      	blx	r3
    } 
  }
  return status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e160      	b.n	8000d1a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8152 	beq.w	8000d14 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d005      	beq.n	8000a88 <HAL_GPIO_Init+0x40>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d130      	bne.n	8000aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2203      	movs	r2, #3
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	f003 0201 	and.w	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d017      	beq.n	8000b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d123      	bne.n	8000b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	08da      	lsrs	r2, r3, #3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	08da      	lsrs	r2, r3, #3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3208      	adds	r2, #8
 8000b74:	6939      	ldr	r1, [r7, #16]
 8000b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0203 	and.w	r2, r3, #3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 80ac 	beq.w	8000d14 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd4:	4a59      	ldr	r2, [pc, #356]	; (8000d3c <HAL_GPIO_Init+0x2f4>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfe:	d025      	beq.n	8000c4c <HAL_GPIO_Init+0x204>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <HAL_GPIO_Init+0x2f8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d01f      	beq.n	8000c48 <HAL_GPIO_Init+0x200>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4e      	ldr	r2, [pc, #312]	; (8000d44 <HAL_GPIO_Init+0x2fc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d019      	beq.n	8000c44 <HAL_GPIO_Init+0x1fc>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4d      	ldr	r2, [pc, #308]	; (8000d48 <HAL_GPIO_Init+0x300>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x1f8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <HAL_GPIO_Init+0x304>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1f4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4b      	ldr	r2, [pc, #300]	; (8000d50 <HAL_GPIO_Init+0x308>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1f0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4a      	ldr	r2, [pc, #296]	; (8000d54 <HAL_GPIO_Init+0x30c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1ec>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e00c      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c34:	2307      	movs	r3, #7
 8000c36:	e00a      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e008      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5e:	4937      	ldr	r1, [pc, #220]	; (8000d3c <HAL_GPIO_Init+0x2f4>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c90:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_GPIO_Init+0x310>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f47f ae97 	bne.w	8000a58 <HAL_GPIO_Init+0x10>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48001400 	.word	0x48001400
 8000d54:	48001800 	.word	0x48001800
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	041a      	lsls	r2, r3, #16
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43d9      	mvns	r1, r3
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	400b      	ands	r3, r1
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f001 b83a 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 816f 	beq.w	80010da <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfc:	4bb5      	ldr	r3, [pc, #724]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4bb2      	ldr	r3, [pc, #712]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d15c      	bne.n	8000ece <HAL_RCC_OscConfig+0x10e>
 8000e14:	4baf      	ldr	r3, [pc, #700]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d155      	bne.n	8000ece <HAL_RCC_OscConfig+0x10e>
 8000e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x94>
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	e015      	b.n	8000e80 <HAL_RCC_OscConfig+0xc0>
 8000e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e7c:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e84:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e88:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e8c:	fa92 f2a2 	rbit	r2, r2
 8000e90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 8111 	beq.w	80010d8 <HAL_RCC_OscConfig+0x318>
 8000eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8108 	bne.w	80010d8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f000 bfc6 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x12e>
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7b      	ldr	r2, [pc, #492]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e036      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x158>
 8000efe:	4b75      	ldr	r3, [pc, #468]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a74      	ldr	r2, [pc, #464]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b72      	ldr	r3, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a71      	ldr	r2, [pc, #452]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e021      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x184>
 8000f2a:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a69      	ldr	r2, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a66      	ldr	r2, [pc, #408]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a62      	ldr	r2, [pc, #392]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b60      	ldr	r3, [pc, #384]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5f      	ldr	r2, [pc, #380]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d059      	beq.n	8001020 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fbb4 	bl	80006d8 <HAL_GetTick>
 8000f70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f76:	f7ff fbaf 	bl	80006d8 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d902      	bls.n	8000f8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f000 bf67 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000fa0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d102      	bne.n	8000fbe <HAL_RCC_OscConfig+0x1fe>
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	e015      	b.n	8000fea <HAL_RCC_OscConfig+0x22a>
 8000fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ff2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ff6:	fa92 f2a2 	rbit	r2, r2
 8000ffa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000ffe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001002:	fab2 f282 	clz	r2, r2
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f042 0220 	orr.w	r2, r2, #32
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	f002 021f 	and.w	r2, r2, #31
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0ab      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1b6>
 800101e:	e05c      	b.n	80010da <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb5a 	bl	80006d8 <HAL_GetTick>
 8001024:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fb55 	bl	80006d8 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d902      	bls.n	8001040 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	f000 bf0d 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001054:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x2b2>
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	e015      	b.n	800109e <HAL_RCC_OscConfig+0x2de>
 8001072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001076:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800108e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_RCC_OscConfig+0x314>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80010a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80010b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f002 021f 	and.w	r2, r2, #31
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ab      	bne.n	800102a <HAL_RCC_OscConfig+0x26a>
 80010d2:	e002      	b.n	80010da <HAL_RCC_OscConfig+0x31a>
 80010d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 817f 	beq.w	80013ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010f0:	4ba7      	ldr	r3, [pc, #668]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010fc:	4ba4      	ldr	r3, [pc, #656]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d173      	bne.n	80011f0 <HAL_RCC_OscConfig+0x430>
 8001108:	4ba1      	ldr	r3, [pc, #644]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001114:	d16c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x430>
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001128:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x386>
 8001140:	4b93      	ldr	r3, [pc, #588]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e013      	b.n	800116e <HAL_RCC_OscConfig+0x3ae>
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800115e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	2202      	movs	r2, #2
 8001170:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001174:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001178:	fa92 f2a2 	rbit	r2, r2
 800117c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001180:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3f6>
 80011a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d002      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 be52 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b76      	ldr	r3, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	21f8      	movs	r1, #248	; 0xf8
 80011cc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80011d4:	fa91 f1a1 	rbit	r1, r1
 80011d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80011dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011e0:	fab1 f181 	clz	r1, r1
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	408b      	lsls	r3, r1
 80011e8:	4969      	ldr	r1, [pc, #420]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e0fe      	b.n	80013ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8088 	beq.w	8001312 <HAL_RCC_OscConfig+0x552>
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001214:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001222:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	461a      	mov	r2, r3
 800122a:	2301      	movs	r3, #1
 800122c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fa53 	bl	80006d8 <HAL_GetTick>
 8001232:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fa4e 	bl	80006d8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d902      	bls.n	800124e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	f000 be06 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001260:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d102      	bne.n	800127e <HAL_RCC_OscConfig+0x4be>
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	e013      	b.n	80012a6 <HAL_RCC_OscConfig+0x4e6>
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001296:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	2202      	movs	r2, #2
 80012a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012b0:	fa92 f2a2 	rbit	r2, r2
 80012b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80012b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012bc:	fab2 f282 	clz	r2, r2
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f002 021f 	and.w	r2, r2, #31
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0af      	beq.n	8001238 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	21f8      	movs	r1, #248	; 0xf8
 80012ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012f6:	fa91 f1a1 	rbit	r1, r1
 80012fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001302:	fab1 f181 	clz	r1, r1
 8001306:	b2c9      	uxtb	r1, r1
 8001308:	408b      	lsls	r3, r1
 800130a:	4921      	ldr	r1, [pc, #132]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e06d      	b.n	80013ee <HAL_RCC_OscConfig+0x62e>
 8001312:	2301      	movs	r3, #1
 8001314:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001324:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001328:	fab3 f383 	clz	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001332:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	461a      	mov	r2, r3
 800133a:	2300      	movs	r3, #0
 800133c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff f9cb 	bl	80006d8 <HAL_GetTick>
 8001342:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e00a      	b.n	800135e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff f9c6 	bl	80006d8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d902      	bls.n	800135e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	f000 bd7e 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001370:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_RCC_OscConfig+0x5d4>
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <HAL_RCC_OscConfig+0x5d0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e016      	b.n	80013bc <HAL_RCC_OscConfig+0x5fc>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013b8:	4bbf      	ldr	r3, [pc, #764]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	2202      	movs	r2, #2
 80013be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80013c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013c6:	fa92 f2a2 	rbit	r2, r2
 80013ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80013ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013d2:	fab2 f282 	clz	r2, r2
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	f002 021f 	and.w	r2, r2, #31
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ac      	bne.n	8001348 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8113 	beq.w	800162a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001408:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d07c      	beq.n	800150e <HAL_RCC_OscConfig+0x74e>
 8001414:	2301      	movs	r3, #1
 8001416:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001426:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <HAL_RCC_OscConfig+0x8fc>)
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	461a      	mov	r2, r3
 800143a:	2301      	movs	r3, #1
 800143c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff f94b 	bl	80006d8 <HAL_GetTick>
 8001442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff f946 	bl	80006d8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d902      	bls.n	800145e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	f000 bcfe 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001470:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fa93 f2a3 	rbit	r2, r3
 8001490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 80014c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ca:	2102      	movs	r1, #2
 80014cc:	6019      	str	r1, [r3, #0]
 80014ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f1a3 	rbit	r1, r3
 80014dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014e4:	6019      	str	r1, [r3, #0]
  return result;
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d09d      	beq.n	8001448 <HAL_RCC_OscConfig+0x688>
 800150c:	e08d      	b.n	800162a <HAL_RCC_OscConfig+0x86a>
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001530:	601a      	str	r2, [r3, #0]
  return result;
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800153a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <HAL_RCC_OscConfig+0x8fc>)
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	461a      	mov	r2, r3
 800154c:	2300      	movs	r3, #0
 800154e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff f8c2 	bl	80006d8 <HAL_GetTick>
 8001554:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff f8bd 	bl	80006d8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d902      	bls.n	8001570 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	f000 bc75 	b.w	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001578:	2202      	movs	r2, #2
 800157a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001580:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 80015de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015e8:	2102      	movs	r1, #2
 80015ea:	6019      	str	r1, [r3, #0]
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f1a3 	rbit	r1, r3
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001602:	6019      	str	r1, [r3, #0]
  return result;
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d197      	bne.n	800155a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 81a5 	beq.w	800198a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x8f8>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001678:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x900>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d121      	bne.n	80016d0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_RCC_OscConfig+0x900>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x900>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001698:	f7ff f81e 	bl	80006d8 <HAL_GetTick>
 800169c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e010      	b.n	80016c4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff f819 	bl	80006d8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d908      	bls.n	80016c4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e3d1      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	10908120 	.word	0x10908120
 80016c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b8d      	ldr	r3, [pc, #564]	; (80018fc <HAL_RCC_OscConfig+0xb3c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e8      	beq.n	80016a2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x92e>
 80016e0:	4b87      	ldr	r3, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a86      	ldr	r2, [pc, #536]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e035      	b.n	800175a <HAL_RCC_OscConfig+0x99a>
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x958>
 80016fe:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a7c      	ldr	r2, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	e020      	b.n	800175a <HAL_RCC_OscConfig+0x99a>
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x982>
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a74      	ldr	r2, [pc, #464]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a71      	ldr	r2, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x99a>
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a6b      	ldr	r2, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8081 	beq.w	800186e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7fe ffb4 	bl	80006d8 <HAL_GetTick>
 8001770:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7fe ffaf 	bl	80006d8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e365      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017d4:	601a      	str	r2, [r3, #0]
  return result;
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0xa3a>
 80017f4:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	e013      	b.n	8001822 <HAL_RCC_OscConfig+0xa62>
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001802:	2202      	movs	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800182a:	2102      	movs	r1, #2
 800182c:	6011      	str	r1, [r2, #0]
 800182e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001832:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	fa92 f1a2 	rbit	r1, r2
 800183c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001840:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001844:	6011      	str	r1, [r2, #0]
  return result;
 8001846:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800184a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d084      	beq.n	8001776 <HAL_RCC_OscConfig+0x9b6>
 800186c:	e083      	b.n	8001976 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7fe ff33 	bl	80006d8 <HAL_GetTick>
 8001872:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7fe ff2e 	bl	80006d8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e2e4      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018d6:	601a      	str	r2, [r3, #0]
  return result;
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0xb44>
 80018f6:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_RCC_OscConfig+0xb40>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	e017      	b.n	800192c <HAL_RCC_OscConfig+0xb6c>
 80018fc:	40007000 	.word	0x40007000
 8001900:	40021000 	.word	0x40021000
 8001904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001908:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800190c:	2202      	movs	r2, #2
 800190e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	4bb3      	ldr	r3, [pc, #716]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001930:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001934:	2102      	movs	r1, #2
 8001936:	6011      	str	r1, [r2, #0]
 8001938:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800193c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	fa92 f1a2 	rbit	r1, r2
 8001946:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800194a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800194e:	6011      	str	r1, [r2, #0]
  return result;
 8001950:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001954:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d180      	bne.n	8001878 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001976:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b9e      	ldr	r3, [pc, #632]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a9d      	ldr	r2, [pc, #628]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 825e 	beq.w	8001e58 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f000 821f 	beq.w	8001de8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f040 8170 	bne.w	8001c9c <HAL_RCC_OscConfig+0xedc>
 80019bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e0:	601a      	str	r2, [r3, #0]
  return result;
 80019e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe fe69 	bl	80006d8 <HAL_GetTick>
 8001a06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	e009      	b.n	8001a20 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7fe fe64 	bl	80006d8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e21c      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a44:	601a      	str	r2, [r3, #0]
  return result;
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0xcaa>
 8001a64:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e027      	b.n	8001aba <HAL_RCC_OscConfig+0xcfa>
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001abe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ac2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac6:	6011      	str	r1, [r2, #0]
 8001ac8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001acc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	fa92 f1a2 	rbit	r1, r2
 8001ad6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ada:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ade:	6011      	str	r1, [r2, #0]
  return result;
 8001ae0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ae4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	fab2 f282 	clz	r2, r2
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f002 021f 	and.w	r2, r2, #31
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d182      	bne.n	8001a0c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f023 020f 	bic.w	r2, r3, #15
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a19      	ldr	r1, [r3, #32]
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	492d      	ldr	r1, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f2a3 	rbit	r2, r3
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b6c:	601a      	str	r2, [r3, #0]
  return result;
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b76:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fda3 	bl	80006d8 <HAL_GetTick>
 8001b92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b96:	e009      	b.n	8001bac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe fd9e 	bl	80006d8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e156      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bd0:	601a      	str	r2, [r3, #0]
  return result;
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0xe3c>
 8001bf0:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_RCC_OscConfig+0xe38>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e02a      	b.n	8001c4c <HAL_RCC_OscConfig+0xe8c>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_RCC_OscConfig+0x10a4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c6c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c70:	6011      	str	r1, [r2, #0]
  return result;
 8001c72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c76:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f43f af7f 	beq.w	8001b98 <HAL_RCC_OscConfig+0xdd8>
 8001c9a:	e0dd      	b.n	8001e58 <HAL_RCC_OscConfig+0x1098>
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cc0:	601a      	str	r2, [r3, #0]
  return result;
 8001cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fcf9 	bl	80006d8 <HAL_GetTick>
 8001ce6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e009      	b.n	8001d00 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fcf4 	bl	80006d8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0ac      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0xf8a>
 8001d44:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x10a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	e027      	b.n	8001d9a <HAL_RCC_OscConfig+0xfda>
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d90:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <HAL_RCC_OscConfig+0x10a4>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001da2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da6:	6011      	str	r1, [r2, #0]
 8001da8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	fa92 f1a2 	rbit	r1, r2
 8001db6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001dbe:	6011      	str	r1, [r2, #0]
  return result;
 8001dc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d182      	bne.n	8001cec <HAL_RCC_OscConfig+0xf2c>
 8001de6:	e037      	b.n	8001e58 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e02e      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x10a4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_RCC_OscConfig+0x10a4>)
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d117      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09e      	sub	sp, #120	; 0x78
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e162      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b90      	ldr	r3, [pc, #576]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b8d      	ldr	r3, [pc, #564]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	498b      	ldr	r1, [pc, #556]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e14a      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	497f      	ldr	r1, [pc, #508]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80dc 	beq.w	8002094 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d13c      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xf6>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xa6>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e00f      	b.n	8001f2e <HAL_RCC_ClockConfig+0xc6>
 8001f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	663b      	str	r3, [r7, #96]	; 0x60
 8001f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f36:	fa92 f2a2 	rbit	r2, r2
 8001f3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f042 0220 	orr.w	r2, r2, #32
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f002 021f 	and.w	r2, r2, #31
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d17b      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0f3      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d13c      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x178>
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x128>
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
 8001f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fac:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f002 021f 	and.w	r2, r2, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13a      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b2      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_ClockConfig+0x1a0>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e00d      	b.n	8002024 <HAL_RCC_ClockConfig+0x1bc>
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2202      	movs	r2, #2
 8002026:	61ba      	str	r2, [r7, #24]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	617a      	str	r2, [r7, #20]
  return result;
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0220 	orr.w	r2, r2, #32
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e079      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	491a      	ldr	r1, [pc, #104]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7fe fb38 	bl	80006d8 <HAL_GetTick>
 8002068:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe fb34 	bl	80006d8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e061      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d214      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e040      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	491a      	ldr	r1, [pc, #104]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4912      	ldr	r1, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800210a:	f000 f829 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	60fa      	str	r2, [r7, #12]
  return result;
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	40d3      	lsrs	r3, r2
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x2ec>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	fa21 f303 	lsr.w	r3, r1, r3
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x2f0>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_ClockConfig+0x2f4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa86 	bl	8000650 <HAL_InitTick>
  
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3778      	adds	r7, #120	; 0x78
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	08003d08 	.word	0x08003d08
 8002158:	20000010 	.word	0x20000010
 800215c:	20000014 	.word	0x20000014

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b08b      	sub	sp, #44	; 0x2c
 8002164:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x36>
 800218e:	e03f      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	e03f      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800219c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	607a      	str	r2, [r7, #4]
  return result;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	220f      	movs	r2, #15
 80021c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	60fa      	str	r2, [r7, #12]
  return result;
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	40d3      	lsrs	r3, r2
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e8:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	e007      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	623b      	str	r3, [r7, #32]
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002212:	623b      	str	r3, [r7, #32]
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6a3b      	ldr	r3, [r7, #32]
}
 8002218:	4618      	mov	r0, r3
 800221a:	372c      	adds	r7, #44	; 0x2c
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	08003d20 	.word	0x08003d20
 8002230:	08003d30 	.word	0x08003d30

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000010 	.word	0x20000010

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002252:	f7ff ffef 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002256:	4601      	mov	r1, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002260:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002264:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	603a      	str	r2, [r7, #0]
  return result;
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	40d3      	lsrs	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_RCC_GetPCLK1Freq+0x40>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08003d18 	.word	0x08003d18

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002296:	f7ff ffcd 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	603a      	str	r2, [r7, #0]
  return result;
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08003d18 	.word	0x08003d18

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b092      	sub	sp, #72	; 0x48
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80d4 	beq.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10e      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230e:	61d3      	str	r3, [r2, #28]
 8002310:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe f9cd 	bl	80006d8 <HAL_GetTick>
 800233e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe f9c9 	bl	80006d8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1d6      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8084 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800237c:	429a      	cmp	r2, r3
 800237e:	d07c      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	2301      	movs	r3, #1
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2300      	movs	r3, #0
 80023d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d04b      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe f979 	bl	80006d8 <HAL_GetTick>
 80023e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe f975 	bl	80006d8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e180      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	61fb      	str	r3, [r7, #28]
  return result;
 8002418:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d108      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800242e:	4b01      	ldr	r3, [pc, #4]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	e00d      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	10908100 	.word	0x10908100
 8002440:	2302      	movs	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2202      	movs	r2, #2
 8002452:	613a      	str	r2, [r7, #16]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	fa92 f2a2 	rbit	r2, r2
 800245a:	60fa      	str	r2, [r7, #12]
  return result;
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	fab2 f282 	clz	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0b7      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800247a:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	498c      	ldr	r1, [pc, #560]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4a87      	ldr	r2, [pc, #540]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ac:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	497f      	ldr	r1, [pc, #508]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4978      	ldr	r1, [pc, #480]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e8:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4970      	ldr	r1, [pc, #448]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002506:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f023 0210 	bic.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4969      	ldr	r1, [pc, #420]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	4961      	ldr	r1, [pc, #388]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f023 0220 	bic.w	r2, r3, #32
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	495a      	ldr	r1, [pc, #360]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	4952      	ldr	r1, [pc, #328]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	494b      	ldr	r1, [pc, #300]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4943      	ldr	r1, [pc, #268]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	493c      	ldr	r1, [pc, #240]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025d8:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	492d      	ldr	r1, [pc, #180]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	4925      	ldr	r1, [pc, #148]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	491e      	ldr	r1, [pc, #120]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	490f      	ldr	r1, [pc, #60]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	e002      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	4913      	ldr	r1, [pc, #76]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	490b      	ldr	r1, [pc, #44]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3748      	adds	r7, #72	; 0x48
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e040      	b.n	80027a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fd febc 	bl	80004b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	; 0x24
 800273c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fc00 	bl	8002f54 <UART_SetConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fdc8 	bl	80032fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fe4f 	bl	8003440 <UART_CheckIdleState>
 80027a2:	4603      	mov	r3, r0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d178      	bne.n	80028b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Transmit+0x24>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e071      	b.n	80028b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2221      	movs	r2, #33	; 0x21
 80027e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fd ff79 	bl	80006d8 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d108      	bne.n	8002814 <HAL_UART_Transmit+0x68>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	e003      	b.n	800281c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800281c:	e030      	b.n	8002880 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 feb1 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e03c      	b.n	80028b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	b292      	uxth	r2, r2
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3302      	adds	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e008      	b.n	800286e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	b292      	uxth	r2, r2
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	3301      	adds	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1c8      	bne.n	800281e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fe7a 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e005      	b.n	80028b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d132      	bne.n	800293e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Receive_IT+0x24>
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e02b      	b.n	8002940 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d018      	beq.n	800292e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	613b      	str	r3, [r7, #16]
   return(result);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	69f9      	ldr	r1, [r7, #28]
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	61bb      	str	r3, [r7, #24]
   return(result);
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e6      	bne.n	80028fc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	461a      	mov	r2, r3
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fe93 	bl	8003660 <UART_Start_Receive_IT>
 800293a:	4603      	mov	r3, r0
 800293c:	e000      	b.n	8002940 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ba      	sub	sp, #232	; 0xe8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800296e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002972:	f640 030f 	movw	r3, #2063	; 0x80f
 8002976:	4013      	ands	r3, r2
 8002978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800297c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d115      	bne.n	80029b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00f      	beq.n	80029b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 82ab 	beq.w	8002efc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
      }
      return;
 80029ae:	e2a5      	b.n	8002efc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8117 	beq.w	8002be8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_UART_IRQHandler+0x298>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 810a 	beq.w	8002be8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_UART_IRQHandler+0xbc>
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <HAL_UART_IRQHandler+0xec>
 8002a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d011      	beq.n	8002a64 <HAL_UART_IRQHandler+0x11c>
 8002a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	f043 0208 	orr.w	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x18a>
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8211 	beq.w	8002f00 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d005      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d04f      	beq.n	8002bca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe5e 	bl	80037ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d141      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3308      	adds	r3, #8
 8002b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3308      	adds	r3, #8
 8002b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1d9      	bne.n	8002b3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_UART_IRQHandler+0x29c>)
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd ff14 	bl	80009cc <HAL_DMA_Abort_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e00f      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9b4 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e00b      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9b0 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e007      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9ac 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002bd8:	e192      	b.n	8002f00 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	bf00      	nop
    return;
 8002bdc:	e190      	b.n	8002f00 <HAL_UART_IRQHandler+0x5b8>
 8002bde:	bf00      	nop
 8002be0:	04000120 	.word	0x04000120
 8002be4:	080038b5 	.word	0x080038b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 814b 	bne.w	8002e88 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8144 	beq.w	8002e88 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 813d 	beq.w	8002e88 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	f040 80b5 	bne.w	8002d90 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8164 	beq.w	8002f04 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c46:	429a      	cmp	r2, r3
 8002c48:	f080 815c 	bcs.w	8002f04 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	f000 8086 	beq.w	8002d6e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1da      	bne.n	8002c62 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e1      	bne.n	8002cac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3308      	adds	r3, #8
 8002cee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e3      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3e:	f023 0310 	bic.w	r3, r3, #16
 8002d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e4      	bne.n	8002d2e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fdf6 	bl	800095a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8d7 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d8e:	e0b9      	b.n	8002f04 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80ab 	beq.w	8002f08 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80a6 	beq.w	8002f08 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e4      	bne.n	8002dbc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3308      	adds	r3, #8
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	623b      	str	r3, [r7, #32]
   return(result);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3308      	adds	r3, #8
 8002e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e16:	633a      	str	r2, [r7, #48]	; 0x30
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e3      	bne.n	8002df2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e4      	bne.n	8002e3e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f85b 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e86:	e03f      	b.n	8002f08 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x56a>
 8002e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 feea 	bl	8003c84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eb0:	e02d      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01c      	beq.n	8002f0c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    }
    return;
 8002eda:	e017      	b.n	8002f0c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
 8002ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fcf3 	bl	80038e0 <UART_EndTransmit_IT>
    return;
 8002efa:	e008      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002efc:	bf00      	nop
 8002efe:	e006      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f00:	bf00      	nop
 8002f02:	e004      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f04:	bf00      	nop
 8002f06:	e002      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f0c:	bf00      	nop
  }

}
 8002f0e:	37e8      	adds	r7, #232	; 0xe8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <UART_SetConfig+0x274>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a80      	ldr	r2, [pc, #512]	; (80031cc <UART_SetConfig+0x278>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d120      	bne.n	8003012 <UART_SetConfig+0xbe>
 8002fd0:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <UART_SetConfig+0x27c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d817      	bhi.n	800300c <UART_SetConfig+0xb8>
 8002fdc:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <UART_SetConfig+0x90>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08003001 	.word	0x08003001
 8002fec:	08003007 	.word	0x08003007
 8002ff0:	08002ffb 	.word	0x08002ffb
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e0b5      	b.n	8003166 <UART_SetConfig+0x212>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e0b2      	b.n	8003166 <UART_SetConfig+0x212>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e0af      	b.n	8003166 <UART_SetConfig+0x212>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e0ac      	b.n	8003166 <UART_SetConfig+0x212>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e0a9      	b.n	8003166 <UART_SetConfig+0x212>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6f      	ldr	r2, [pc, #444]	; (80031d4 <UART_SetConfig+0x280>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d124      	bne.n	8003066 <UART_SetConfig+0x112>
 800301c:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <UART_SetConfig+0x27c>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003028:	d011      	beq.n	800304e <UART_SetConfig+0xfa>
 800302a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800302e:	d817      	bhi.n	8003060 <UART_SetConfig+0x10c>
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003034:	d011      	beq.n	800305a <UART_SetConfig+0x106>
 8003036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303a:	d811      	bhi.n	8003060 <UART_SetConfig+0x10c>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <UART_SetConfig+0xf4>
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d006      	beq.n	8003054 <UART_SetConfig+0x100>
 8003046:	e00b      	b.n	8003060 <UART_SetConfig+0x10c>
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e08b      	b.n	8003166 <UART_SetConfig+0x212>
 800304e:	2302      	movs	r3, #2
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e088      	b.n	8003166 <UART_SetConfig+0x212>
 8003054:	2304      	movs	r3, #4
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e085      	b.n	8003166 <UART_SetConfig+0x212>
 800305a:	2308      	movs	r3, #8
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e082      	b.n	8003166 <UART_SetConfig+0x212>
 8003060:	2310      	movs	r3, #16
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e07f      	b.n	8003166 <UART_SetConfig+0x212>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <UART_SetConfig+0x284>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d124      	bne.n	80030ba <UART_SetConfig+0x166>
 8003070:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <UART_SetConfig+0x27c>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003078:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800307c:	d011      	beq.n	80030a2 <UART_SetConfig+0x14e>
 800307e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003082:	d817      	bhi.n	80030b4 <UART_SetConfig+0x160>
 8003084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003088:	d011      	beq.n	80030ae <UART_SetConfig+0x15a>
 800308a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800308e:	d811      	bhi.n	80030b4 <UART_SetConfig+0x160>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <UART_SetConfig+0x148>
 8003094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003098:	d006      	beq.n	80030a8 <UART_SetConfig+0x154>
 800309a:	e00b      	b.n	80030b4 <UART_SetConfig+0x160>
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e061      	b.n	8003166 <UART_SetConfig+0x212>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e05e      	b.n	8003166 <UART_SetConfig+0x212>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e05b      	b.n	8003166 <UART_SetConfig+0x212>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e058      	b.n	8003166 <UART_SetConfig+0x212>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e055      	b.n	8003166 <UART_SetConfig+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a47      	ldr	r2, [pc, #284]	; (80031dc <UART_SetConfig+0x288>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d124      	bne.n	800310e <UART_SetConfig+0x1ba>
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <UART_SetConfig+0x27c>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030d0:	d011      	beq.n	80030f6 <UART_SetConfig+0x1a2>
 80030d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030d6:	d817      	bhi.n	8003108 <UART_SetConfig+0x1b4>
 80030d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030dc:	d011      	beq.n	8003102 <UART_SetConfig+0x1ae>
 80030de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e2:	d811      	bhi.n	8003108 <UART_SetConfig+0x1b4>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <UART_SetConfig+0x19c>
 80030e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ec:	d006      	beq.n	80030fc <UART_SetConfig+0x1a8>
 80030ee:	e00b      	b.n	8003108 <UART_SetConfig+0x1b4>
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e037      	b.n	8003166 <UART_SetConfig+0x212>
 80030f6:	2302      	movs	r3, #2
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e034      	b.n	8003166 <UART_SetConfig+0x212>
 80030fc:	2304      	movs	r3, #4
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e031      	b.n	8003166 <UART_SetConfig+0x212>
 8003102:	2308      	movs	r3, #8
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e02e      	b.n	8003166 <UART_SetConfig+0x212>
 8003108:	2310      	movs	r3, #16
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e02b      	b.n	8003166 <UART_SetConfig+0x212>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <UART_SetConfig+0x28c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d124      	bne.n	8003162 <UART_SetConfig+0x20e>
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <UART_SetConfig+0x27c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003120:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003124:	d011      	beq.n	800314a <UART_SetConfig+0x1f6>
 8003126:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800312a:	d817      	bhi.n	800315c <UART_SetConfig+0x208>
 800312c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0x202>
 8003132:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003136:	d811      	bhi.n	800315c <UART_SetConfig+0x208>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <UART_SetConfig+0x1f0>
 800313c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003140:	d006      	beq.n	8003150 <UART_SetConfig+0x1fc>
 8003142:	e00b      	b.n	800315c <UART_SetConfig+0x208>
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x212>
 800314a:	2302      	movs	r3, #2
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e00a      	b.n	8003166 <UART_SetConfig+0x212>
 8003150:	2304      	movs	r3, #4
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e007      	b.n	8003166 <UART_SetConfig+0x212>
 8003156:	2308      	movs	r3, #8
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e004      	b.n	8003166 <UART_SetConfig+0x212>
 800315c:	2310      	movs	r3, #16
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e001      	b.n	8003166 <UART_SetConfig+0x212>
 8003162:	2310      	movs	r3, #16
 8003164:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	d16b      	bne.n	8003248 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d838      	bhi.n	80031e8 <UART_SetConfig+0x294>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <UART_SetConfig+0x228>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031e9 	.word	0x080031e9
 800318c:	080031b7 	.word	0x080031b7
 8003190:	080031e9 	.word	0x080031e9
 8003194:	080031e9 	.word	0x080031e9
 8003198:	080031e9 	.word	0x080031e9
 800319c:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7ff f854 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 80031a4:	61b8      	str	r0, [r7, #24]
        break;
 80031a6:	e024      	b.n	80031f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7ff f872 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80031ac:	61b8      	str	r0, [r7, #24]
        break;
 80031ae:	e020      	b.n	80031f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <UART_SetConfig+0x290>)
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e01d      	b.n	80031f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe ffd3 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 80031ba:	61b8      	str	r0, [r7, #24]
        break;
 80031bc:	e019      	b.n	80031f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	61bb      	str	r3, [r7, #24]
        break;
 80031c4:	e015      	b.n	80031f2 <UART_SetConfig+0x29e>
 80031c6:	bf00      	nop
 80031c8:	efff69f3 	.word	0xefff69f3
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40004400 	.word	0x40004400
 80031d8:	40004800 	.word	0x40004800
 80031dc:	40004c00 	.word	0x40004c00
 80031e0:	40005000 	.word	0x40005000
 80031e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77bb      	strb	r3, [r7, #30]
        break;
 80031f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d073      	beq.n	80032e0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	005a      	lsls	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b0f      	cmp	r3, #15
 8003212:	d916      	bls.n	8003242 <UART_SetConfig+0x2ee>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321a:	d212      	bcs.n	8003242 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	b29a      	uxth	r2, r3
 8003232:	89fb      	ldrh	r3, [r7, #14]
 8003234:	4313      	orrs	r3, r2
 8003236:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	89fa      	ldrh	r2, [r7, #14]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e04e      	b.n	80032e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	77bb      	strb	r3, [r7, #30]
 8003246:	e04b      	b.n	80032e0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003248:	7ffb      	ldrb	r3, [r7, #31]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d827      	bhi.n	800329e <UART_SetConfig+0x34a>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x300>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	0800329f 	.word	0x0800329f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800329f 	.word	0x0800329f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7fe ffe8 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 800327c:	61b8      	str	r0, [r7, #24]
        break;
 800327e:	e013      	b.n	80032a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff f806 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8003284:	61b8      	str	r0, [r7, #24]
        break;
 8003286:	e00f      	b.n	80032a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <UART_SetConfig+0x3a4>)
 800328a:	61bb      	str	r3, [r7, #24]
        break;
 800328c:	e00c      	b.n	80032a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7fe ff67 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8003292:	61b8      	str	r0, [r7, #24]
        break;
 8003294:	e008      	b.n	80032a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e004      	b.n	80032a8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77bb      	strb	r3, [r7, #30]
        break;
 80032a6:	bf00      	nop
    }

    if (pclk != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	085a      	lsrs	r2, r3, #1
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d909      	bls.n	80032dc <UART_SetConfig+0x388>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d205      	bcs.n	80032dc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e001      	b.n	80032e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	007a1200 	.word	0x007a1200

080032fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01a      	beq.n	8003412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d10a      	bne.n	8003412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b098      	sub	sp, #96	; 0x60
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003450:	f7fd f942 	bl	80006d8 <HAL_GetTick>
 8003454:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d12e      	bne.n	80034c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f88c 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d021      	beq.n	80034c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003492:	653b      	str	r3, [r7, #80]	; 0x50
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
 800349e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e6      	bne.n	800347e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e062      	b.n	8003588 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d149      	bne.n	8003564 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	2200      	movs	r2, #0
 80034da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f856 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03c      	beq.n	8003564 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	623b      	str	r3, [r7, #32]
   return(result);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
 800350a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800350e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e6      	bne.n	80034ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3308      	adds	r3, #8
 8003522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	60fb      	str	r3, [r7, #12]
   return(result);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800353c:	61fa      	str	r2, [r7, #28]
 800353e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e5      	bne.n	800351c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e011      	b.n	8003588 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3758      	adds	r7, #88	; 0x58
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a0:	e049      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a8:	d045      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fd f895 	bl	80006d8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e048      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d031      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d110      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f8ff 	bl	80037ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2208      	movs	r2, #8
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e029      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	d111      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f8e5 	bl	80037ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0a6      	beq.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003660:	b480      	push	{r7}
 8003662:	b097      	sub	sp, #92	; 0x5c
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d10e      	bne.n	80036b2 <UART_Start_Receive_IT+0x52>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <UART_Start_Receive_IT+0x48>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a6:	e02d      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b0:	e028      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <UART_Start_Receive_IT+0x76>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <UART_Start_Receive_IT+0x6c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ca:	e01b      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	227f      	movs	r2, #127	; 0x7f
 80036d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d4:	e016      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036de:	d10d      	bne.n	80036fc <UART_Start_Receive_IT+0x9c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <UART_Start_Receive_IT+0x92>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	227f      	movs	r2, #127	; 0x7f
 80036ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f0:	e008      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	223f      	movs	r2, #63	; 0x3f
 80036f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036fa:	e003      	b.n	8003704 <UART_Start_Receive_IT+0xa4>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2222      	movs	r2, #34	; 0x22
 8003710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	657b      	str	r3, [r7, #84]	; 0x54
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003734:	64ba      	str	r2, [r7, #72]	; 0x48
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800373a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d107      	bne.n	8003762 <UART_Start_Receive_IT+0x102>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <UART_Start_Receive_IT+0x184>)
 800375e:	669a      	str	r2, [r3, #104]	; 0x68
 8003760:	e002      	b.n	8003768 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <UART_Start_Receive_IT+0x188>)
 8003766:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d019      	beq.n	80037a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
 8003790:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e6      	bne.n	8003770 <UART_Start_Receive_IT+0x110>
 80037a2:	e018      	b.n	80037d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	613b      	str	r3, [r7, #16]
   return(result);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f043 0320 	orr.w	r3, r3, #32
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	69f9      	ldr	r1, [r7, #28]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	375c      	adds	r7, #92	; 0x5c
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	08003add 	.word	0x08003add
 80037e8:	08003935 	.word	0x08003935

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b095      	sub	sp, #84	; 0x54
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
 8003814:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e6      	bne.n	80037f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	61fb      	str	r3, [r7, #28]
   return(result);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	2b01      	cmp	r3, #1
 8003860:	d118      	bne.n	8003894 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0310 	bic.w	r3, r3, #16
 8003876:	647b      	str	r3, [r7, #68]	; 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	613b      	str	r3, [r7, #16]
   return(result);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e6      	bne.n	8003862 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038a8:	bf00      	nop
 80038aa:	3754      	adds	r7, #84	; 0x54
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fb28 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	613b      	str	r3, [r7, #16]
   return(result);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e6      	bne.n	80038e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff faf4 	bl	8002f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392c:	bf00      	nop
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b09c      	sub	sp, #112	; 0x70
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003942:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394c:	2b22      	cmp	r3, #34	; 0x22
 800394e:	f040 80b9 	bne.w	8003ac4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003958:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800395c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003960:	b2d9      	uxtb	r1, r3
 8003962:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003966:	b2da      	uxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	400a      	ands	r2, r1
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 809c 	bne.w	8003ad4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80039bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e6      	bne.n	800399c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	667b      	str	r3, [r7, #100]	; 0x64
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039ee:	647a      	str	r2, [r7, #68]	; 0x44
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d018      	beq.n	8003a56 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	623b      	str	r3, [r7, #32]
   return(result);
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
 8003a44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e6      	bne.n	8003a24 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d12e      	bne.n	8003abc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d103      	bne.n	8003aac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fa41 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aba:	e00b      	b.n	8003ad4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fc fb89 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003ac2:	e007      	b.n	8003ad4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	619a      	str	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	3770      	adds	r7, #112	; 0x70
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b09c      	sub	sp, #112	; 0x70
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af4:	2b22      	cmp	r3, #34	; 0x22
 8003af6:	f040 80b9 	bne.w	8003c6c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	1c9a      	adds	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 809c 	bne.w	8003c7c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b58:	667b      	str	r3, [r7, #100]	; 0x64
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	657b      	str	r3, [r7, #84]	; 0x54
 8003b64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e6      	bne.n	8003b44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b96:	643a      	str	r2, [r7, #64]	; 0x40
 8003b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e6      	bne.n	8003bcc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12e      	bne.n	8003c64 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	613b      	str	r3, [r7, #16]
   return(result);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d103      	bne.n	8003c54 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2210      	movs	r2, #16
 8003c52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff f96d 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c62:	e00b      	b.n	8003c7c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fc fab5 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003c6a:	e007      	b.n	8003c7c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0208 	orr.w	r2, r2, #8
 8003c7a:	619a      	str	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	3770      	adds	r7, #112	; 0x70
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <memset>:
 8003c98:	4402      	add	r2, r0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4d0d      	ldr	r5, [pc, #52]	; (8003ce0 <__libc_init_array+0x38>)
 8003cac:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cae:	1b64      	subs	r4, r4, r5
 8003cb0:	10a4      	asrs	r4, r4, #2
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	4d0b      	ldr	r5, [pc, #44]	; (8003ce8 <__libc_init_array+0x40>)
 8003cba:	4c0c      	ldr	r4, [pc, #48]	; (8003cec <__libc_init_array+0x44>)
 8003cbc:	f000 f818 	bl	8003cf0 <_init>
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08003d40 	.word	0x08003d40
 8003ce4:	08003d40 	.word	0x08003d40
 8003ce8:	08003d40 	.word	0x08003d40
 8003cec:	08003d44 	.word	0x08003d44

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
